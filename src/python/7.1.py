# Import seaborn
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
from scipy.optimize import curve_fit
import serial
import time as t

# Apply the default theme
sns.set_theme()

# 7.1 (first part)
number_sent = np.array([0.0, 10.0,20.0,30.0,40.0,50.0,60.0,70.0,80.0,90.0,100.0,110.0,120.0,130.0,140.0,150.0,160.0,170.0,180.0,190.0,200.0,210.0,220.0,230.0,240.0,250.0,255.0])
voltage = [0.004,0.201,0.400,0.598,0.796,0.994,1.192,1.391,1.589,1.787,1.985,2.183,2.381,2.580,2.778,2.976,3.174,3.373,3.570,3.768,3.966,4.163,4.359,4.556,4.752,4.948,5.046]

def func(x, a, b):
    return a*x+b

popt, pcov = curve_fit(func, number_sent, voltage)
perr = np.sqrt(np.diag(pcov))

print("a and b:", popt) #array([0.01978933, 0.00549648])

print("error a and b: ", perr) #array([5.70314167e-06, 8.62502151e-04])

# Generating expected values for plotting
expected_out=np.zeros(27)
low_bound=np.zeros(27)
high_bound=np.zeros(27)

for i in range(27):
    expected_out[i]=(popt[0])*number_sent[i] + (popt[1])
    low_bound[i]=(popt[0]-250*perr[0])*number_sent[i] + (popt[1]-250*perr[1])
    high_bound[i]=(popt[0]+250*perr[0])*number_sent[i] + (popt[1]+250*perr[1])

plt.plot(number_sent, expected_out, linewidth=0.5, color='black')
plt.scatter(number_sent, voltage, s=10)
plt.fill_between(number_sent, low_bound, high_bound, alpha=1/3)
plt.xlabel("8-bit rounded voltage reading")
plt.ylabel("Measured Voltage (V)")


# 7.1 (second part)
stats = np.zeros(255)

for  i in range(255):
    value=i
    print("Expected mean: ", value)
    arraySize=500
    serialPort=serial.Serial()
    serialPort.baudrate=9600
    serialPort.port="COM5"
    serialPort.open()
    dataRead=False
    data=[]

    while (dataRead==False):
        serialPort.write(bytes([value]))
        t.sleep(0.1)
        inByte = serialPort.in_waiting
    #This loop reads in data from the array until byteCount reaches the array size (arraySize)
        byteCount=0
        while ((inByte>0)&(byteCount<arraySize)):

            dataByte=serialPort.read()
            byteCount=byteCount+1
            data=data+[dataByte]
        if (byteCount==arraySize):
            dataRead=True
            
    serialPort.close()

    dataOut=np.zeros(arraySize)
    arrayIndex=range(arraySize)
    #Transform unicode encoding into integers
    for i in arrayIndex:
        dataOut[i]=ord(data[i])

    stats[value]=np.mean(dataOut[:-100])
    
    print("mean:", np.mean(dataOut[:-100]))
    
print(stats) #manually savec below for reproducibility without arduino setup

my_dataA0=np.array([0,0.6475,1.5775,2.5225,3.49,4.47,5.44,6.445,7.41,8.4175,9.35,10.1475,11.2325,12.3525,13.1375,14.265,15.1625,16.3,17.0775,18.3125,19.305,20.2325,21.175,22.1975,23.2575,24.3225,25.2875,25.7725,27.255,27.96,29.0925,30.1475,31.3325,32.0875,33.24,34.3475,35.2825,36.2575,37.0775,38.27,39.055,39.6575,41.085,42.32,42.8325,44.1825,44.935,45.7775,47.4275,48.45,49.33,50.1525,51.2775,52.1325,53.3675,53.9525,54.945,56.2075,57.2125,58.2125,59.435,205.535,61.265,62.395,63.1175,64.2275,65.3625,66.4225,67.06,68.32,69.275,69.9375,71.005,72.38,231.39,74.25,75.3175,75.985,77.235,78.345,79.34,79.5075,81.225,82.275,82.985,84.0475,84.6225,86.4025,86.675,88.3975,88.6125,89.585,91.3425,92.3675,93.115,93.99,95.01,95.475,96.5275,98.24,99.45,100.015,100.4225,102.05,102.645,104.2625,105.0525,105.5325,107.035,107.46,109.1075,110.0525,111.045,111.5825,112.67,114.305,115.055,116.385,117.0675,118.0725,119.21,120.2225,120.805,122.0125,122.5175,124.0875,125.125,126,127.1775,128.05,128.54,130.1125,130.575,132.235,132.575,134.195,134.6675,136.0675,137.0975,137.57,139.205,140.2225,140.61,141.955,142.53,144.22,145.1675,146.21,146.4875,147.61,148.5175,150.255,151.165,152.1175,152.5225,154.2525,155.2475,155.44,157.2675,157.6325,158.4875,159.455,160.455,162.195,162.67,163.5775,165.115,165.6375,167.1925,167.5375,168.6575,169.62,170.67,171.625,173.05,173.665,175.24,176.2725,176.445,177.295,179.21,179.2875,180.36,182.215,182.97,184.2575,184.48,186.235,187.2225,188.3075,189.175,189.4225,190.5775,191.6375,193.1675,194.3025,195.2075,195.9575,197.255,197.9675,198.5725,200.29,200.995,202.13,203.1225,204.0725,205.285,206.3225,207.09,208.115,208.7075,209.555,210.52,211.71,213.2,213.9925,215.2125,216.05,217.2625,217.675,219.0225,219.4125,220.44,222.275,223.0075,224.03,224.53,225.43,227.1525,227.3675,228.405,229.405,230.6125,231.38,251.445,233.32,235,236.3,236.3475,237.3475,238.9775,239.8775,241.0725,241.38,243.035,243.375,244.4575,245.6025,246.43,247.56,249.1225,249.3875,250.585,251.6975, 253.2025])

my_dataA1=np.array([0,0.66,1.585,2.515,3.4825,4.44,5.3875,6.4175,7.3975,8.405 ,   9.31  ,  10.41  , 11.3125,  12.37  ,  13.3275,  14.175 ,  15.01  ,  16.295 , 17.3175,  17.98  ,  19.0725,  20.135 ,  21.0025,  22.165 , 23.28  ,  24.2925,  25.1775,  26.1925,  27.2975,  28.11  , 29.18  ,  29.9775,  31.25  ,  32.1825,  33.0325,  34.2525, 34.94  ,  35.765 ,  37.27  ,  38.305 ,  39.31  ,  40.115 , 41.1075,  42.31  ,  42.97  ,  43.6025,  45.2025,  45.975 , 46.9175,  48.315 ,  49.0475,  49.9475,  51.2175,  52.195 , 53.39  ,  53.6725,  55.16  ,  56.1   ,  57.295 ,  58.19  , 59.3925,  59.9075,  61.2825,  61.9275,  63.365 ,  63.9425, 65.3775,  66.2325,  66.94  ,  68.16  ,  69.205 ,  70.1175, 70.6075,  71.6625,  72.515 ,  74.0375,  75.135 ,  76.2375, 76.93  ,  77.905 ,  79.0625,  80.4175,  81.4275,  82.3675, 83.3375,  83.475 ,  85.4225,  85.48  ,  87.04  ,  88.3925, 89.4925,  89.8075,  90.9925,  92.2   ,  93.485 ,  94.08  , 95.15  ,  96.095 ,  97.0425,  98.065 ,  99.1825, 100.435 , 100.5525, 102.04  , 103.0625, 104.2875, 105.0575, 106.055 , 107.0275, 107.485 , 109.3375, 110.2775, 111.06  , 112.055 , 112.5325, 114.3175, 115.02  , 116.0575, 117.0525, 117.91  , 119.1725, 119.965 , 120.7675, 122.2425, 123.2275, 123.5425, 124.565 , 125.53  , 126.5725, 128.17  , 129.235 , 129.91  , 131.185 , 132.2125, 132.5775, 134.1925, 135.23  , 135.585 , 136.6   , 137.8425, 138.995 , 139.615 , 141.2575, 142.1975, 143.28  , 144.215 , 144.63  , 145.7075, 146.5525, 147.875 ,149.195 , 150.08, 150.4975, 152.17  , 153.1125, 154.1275,155.265 , 156.19  , 156.505 , 157.5925, 159.145 , 159.4325,161.2825, 161.6225, 163.1575, 164.18  , 164.6   , 166.0675,167.1125, 167.5075, 169.185 , 170.1375, 170.99  , 171.6925,172.36  , 174.285 , 175.1225, 176.29  , 176.8125, 178.2575,179.2725, 179.5575, 180.5325, 181.7225, 183.29  , 184.24  ,184.4225, 186.2725, 187.2475, 187.605 , 188.615 , 189.4375,190.56  , 191.5225, 192.405 , 194.1275, 194.5025, 195.9625,196.4725, 198.14  , 198.6275, 199.94  , 200.49  , 202.1575,202.395 , 204.3025, 205.07  , 205.36  , 207.265 , 207.3775,209.185 , 210.16  , 210.99  , 211.405 , 212.99  , 213.935 ,214.59  , 215.9775, 217.0625, 218.0275, 218.4675, 219.3475,221.07  , 221.375 , 222.6725, 223.355 , 225.27  , 225.45  ,227.365 , 227.4425, 228.7275, 230.0125, 231.0225, 231.985 ,232.3625, 234.0225, 234.47  , 235.3575, 236.3425, 237.3575,239.0075, 240.0425, 241.06  , 242.09  , 243.02  , 244.09  ,244.4425, 245.4325, 246.485 , 247.5025, 249.1825, 250.13,250.51, 252.2, 252.6025])

full_span = np.linspace(0,255, 255)

differenceA0, differenceA1 = abs(my_dataA0-full_span), abs(my_dataA1-full_span)

chi2A0 = np.sum(np.square(differenceA0[1:])/full_span[1:]) 
chi2A1 = np.sum(np.square(differenceA1[1:])/full_span[1:])


# Plotting expected vs measured for A0
plt.errorbar(full_span, my_dataA0, yerr=differenceA0, alpha=1/3)
plt.scatter(full_span, my_dataA0, s=10)
plt.xlabel("Expected 8-bit rounded voltage reading")
plt.ylabel("Measured 8-bit rounded voltage reading on A0")
plt.title("(A0)")

# Plotting expected vs measured for A1
plt.errorbar(full_span, my_dataA1, yerr=differenceA1, alpha=1/3)
plt.scatter(full_span, my_dataA1, s=10)
plt.xlabel("Expected 8-bit rounded voltage reading")
plt.ylabel("Measured 8-bit rounded voltage reading on A1")
plt.title("(A1)")

